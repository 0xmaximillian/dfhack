##############
DFHack Scripts
##############

Lua or ruby scripts placed in the ``hack/scripts/`` directory are considered for
execution as if they were native DFHack commands. They are listed at the end
of the ``ls`` command output.

Note: scripts in subdirectories of hack/scripts/ can still be called, but will
only be listed by ls if called as ``ls -a``. This is intended as a way to hide
scripts that are obscure, developer-oriented, or should be used as keybindings
or from the init file.

``kill-lua`` stops any currently-running Lua scripts. By default, scripts can
only be interrupted every 256 instructions. Use ``kill-lua force`` to interrupt
the next instruction.

.. contents::

=================
3rd-party scripts
=================

This listing is autogenerated from ``.rst`` files in the 3rdparty scripts directory.

.. warning::

    Because this documentation is pulled in from external sources,
    it may not match the DFHack distribution exactly.

    * Some scripts should have a prefix (eg listed as ``myscript``,
      should be ``gui/myscript``) but don't.
    * Some sections of documentation may refer to scripts which are
      not distributed with DFHack.


.. toctree::
   :glob:
   :maxdepth: 2

   /scripts/3rdparty/**README.rst


=======
devel/*
=======
Scripts in this subdirectory are intended for developers, or still substantially
under development.  If you don't already know what they do, best to leave them alone.

.. include:: ../scripts/devel/include-all.rst

.. _scripts/fix:

================================================
fix/* - scripts that fix bugs or common problems
================================================
Scripts in this subdirectory fix various bugs and issues, some of them obscure.

.. include:: ../scripts/fix/include-all.rst

.. _scripts/gui:

========================================
gui/* - scripts with an ingame interface
========================================
Scripts that implement dialogs inserted into the main game window are put in this
directory.

.. note::

    In order to avoid user confusion, as a matter of policy all these tools
    display the word "DFHack" on the screen somewhere while active.

    When that is not appropriate because they merely add keybinding hints to
    existing DF screens, they deliberately use red instead of green for the key.

.. include:: ../scripts/gui/include-all.rst

.. _scripts/modtools:

========================
modtools/* - for modders
========================
Scripts which provide tools for modders, often with changes to the raw files.
Not intended to be called manually by end-users.

These scripts are mostly useful for raw modders and scripters.

.. note::

    The following paragraph is wrong, which is a horrible, horrible thing because it's super important. ~expwnent TODO.

They all have
standard arguments: arguments are of the form ``tool -argName1 argVal1
-argName2 argVal2``. This is equivalent to ``tool -argName2 argVal2 -argName1
argVal1``. It is not necessary to provide a value to an argument name: ``tool
-argName3`` is fine. Supplying the same argument name multiple times will
result in an error. Argument names are preceded with a dash. The ``-help``
argument will print a descriptive usage string describing the nature of the
arguments. For multiple word argument values, brackets must be used: ``tool
-argName4 [ sadf1 sadf2 sadf3 ]``. In order to allow passing literal braces as
part of the argument, backslashes are used: ``tool -argName4 [ \] asdf \foo ]``
sets ``argName4`` to ``\] asdf foo``. The ``*-trigger`` scripts have a similar
policy with backslashes.

.. include:: ../scripts/modtools/include-all.rst

.. _scripts/other_scripts:

=============
Other Scripts
=============
These scripts are not stored in any subdirectory, and can be invoked directly.

.. include:: ../scripts/include-all.rst
